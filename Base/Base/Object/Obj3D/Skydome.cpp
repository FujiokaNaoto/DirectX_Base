//**プログラムヘッダ***************************************************************
//	プログラム概要	:	スカイドームクラス実装
//*********************************************************************************


//==include部======================================================================
#include "../../System/GameManager.h"

#include "Skydome.h"
//=================================================================================


//==定数・列挙型部=================================================================

//=================================================================================


//==マクロ定義部===================================================================

//=================================================================================


//==クラス・構造体宣言部===========================================================

//=================================================================================


//==静的メンバ変数部===============================================================

//=================================================================================


//==プロトタイプ宣言===============================================================

//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CSkydome::CSkydome():
m_pCamera(NULL)
{
	m_nRSType = m_nRSTypeLate = eRSType::SKYDOME;
}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CSkydome::~CSkydome()
{
}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CSkydome*	CSkydome::Create(LPCTSTR meshName , int nScene , int nPriority)
{
	CSkydome* pObj = new CSkydome();

	if(pObj->Init(meshName , DEFAULT_POS , nScene , nPriority))
		return pObj;

	SAFE_DELETE(pObj);
	return pObj;
}


//**関数***************************************************************************
//	概要	:	アフィン
//*********************************************************************************
void CSkydome::Affine()
{
	// カメラ基準の移動のみ行う
	D3DXMatrixTranslation(&m_Matrix , m_pCamera->GetPos().x , 
									m_pCamera->GetPos().y , 
									m_pCamera->GetPos().z);
}


//**関数***************************************************************************
//	概要	:	描画
//*********************************************************************************
void CSkydome::SetRS()
{
	CGraphics::SemafoLock();

	LPDIRECT3DDEVICE9 pDevice = MANAGER.GetGraph()->GetDevice();

	pDevice->SetRenderState(D3DRS_ZENABLE , FALSE);
	pDevice->SetRenderState(D3DRS_LIGHTING , FALSE);

	pDevice->SetRenderState(D3DRS_CULLMODE , D3DCULL_CCW);

	CGraphics::SemafoUnlock();
}


//**関数***************************************************************************
//	概要	:	描画
//*********************************************************************************
void CSkydome::SetRSLate()
{
	CGraphics::SemafoLock();
	LPDIRECT3DDEVICE9 pDevice = MANAGER.GetGraph()->GetDevice();

	pDevice->SetRenderState(D3DRS_ZENABLE , FALSE);
	pDevice->SetRenderState(D3DRS_LIGHTING , FALSE);

	pDevice->SetRenderState(D3DRS_CULLMODE , D3DCULL_CCW);

	CGraphics::SemafoUnlock();
}


//**関数***************************************************************************
//	概要	:	描画
//*********************************************************************************
void CSkydome::Draw()
{	
	m_pMesh->Draw(m_Matrix);
}
//=================================================================================
//	End of File
//=================================================================================
//**プログラムヘッダ***************************************************************
//	プログラム概要	:	3Dオブジェクトベース
//*********************************************************************************


//==include部======================================================================
#include "../../System/GameManager.h"

#include "Obj3D.h"
//=================================================================================


//==定数・列挙型部=================================================================

//=================================================================================


//==マクロ定義部===================================================================

//=================================================================================


//==クラス・構造体宣言部===========================================================

//=================================================================================


//==静的メンバ変数部===============================================================

//=================================================================================


//==プロトタイプ宣言===============================================================

//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CObj3D::CObj3D():
m_pMesh(NULL)
{
	m_nClassID = eClassCode::OBJ_3D;
	m_nRSType = eRSType::OBJ_3D;
	m_nRSType = eRSType::OBJ_3D_LATE;
}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CObj3D::~CObj3D()
{
}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CObj3D* CObj3D::Create(LPCTSTR meshName , D3DXVECTOR3 pos , 
	 int nSceneID , int nPriority)
{
	CObj3D*	pObj = new CObj3D;

	if(pObj->Init(meshName , pos , nSceneID , nPriority))
		return pObj;

	delete pObj;
	return NULL;
}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CObj3D* CObj3D::Create(LPCTSTR meshName , D3DXVECTOR3 pos , 
		D3DXVECTOR3 rot , D3DXVECTOR3 scall , int nSceneID , int nPriority)
{
	CObj3D*	pObj = new CObj3D;

	if(pObj->Init(meshName , pos , rot , scall , nSceneID , nPriority))
		return pObj;

	delete pObj;
	return pObj;
}


//**関数***************************************************************************
//	概要	:	初期化
//*********************************************************************************
bool CObj3D::Init(LPCTSTR meshName , D3DXVECTOR3 pos , 
		 int nSceneID , int nPriority)
{
	return Init(meshName , pos , DEFAULT_ROT , DEFAULT_SCALL , nSceneID , nPriority);
}


//**関数***************************************************************************
//	概要	:	初期化
//*********************************************************************************
bool CObj3D::Init(LPCTSTR meshName , D3DXVECTOR3 pos , 
		D3DXVECTOR3 rot , D3DXVECTOR3 scall , int nSceneID
		 , int nPriority)
{
	// --初期値格納--
	m_pMesh = MANAGER.GetMeshManage()->Entry(meshName);	// メッシュロードと登録
	if(! m_pMesh)	return false;			// 登録失敗時はNULLを返す

	m_Pos = pos;
	m_Rot = rot;
	m_Scall = scall;
	m_nSceneID = nSceneID;
	m_nPriority = nPriority;				// プライオリティ

	Affine();

	return true;
}


//**関数***************************************************************************
//	概要	:	解放
//*********************************************************************************
void CObj3D::Release()
{
	Uninit();
	delete this;
}


//**関数***************************************************************************
//	概要	:	レンダーステート設定
//*********************************************************************************
void CObj3D::SetRS()
{
	CGraphics::SemafoLock();

	LPDIRECT3DDEVICE9 pDevice = MANAGER.GetGraph()->GetDevice();
	// 描画設定
	pDevice->SetRenderState(D3DRS_ZENABLE , TRUE);						// Zバッファオン
	pDevice->SetRenderState(D3DRS_LIGHTING , TRUE);						// ライトオン

	pDevice->SetRenderState(D3DRS_CULLMODE , D3DCULL_CCW);

	CGraphics::SemafoUnlock();
}


//**関数***************************************************************************
//	概要	:	後描画用レンダーステート設定
//*********************************************************************************
void CObj3D::SetRSLate()
{
	CGraphics::SemafoLock();

	// グラフィックデバイス取得
	LPDIRECT3DDEVICE9 pDevice = MANAGER.GetGraph()->GetDevice();

	// 描画設定
	pDevice->SetRenderState(D3DRS_ZENABLE , TRUE);						// Zバッファオン
	pDevice->SetRenderState(D3DRS_LIGHTING , TRUE);						// ライトオン
	pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);				// アルファブレンドあり

	pDevice->SetRenderState(D3DRS_CULLMODE , D3DCULL_CCW);

	CGraphics::SemafoUnlock();
}


//**関数***************************************************************************
//	概要	:	先描画
//			:	3Dにおいてはフラグの判定を行わないで透明と不透明両方描画する
//			:	不透明描画
//*********************************************************************************
void CObj3D::Draw()
{
	// 描画フラグがオフかメッシュが格納されていないなら描画しない
	if(!m_bUseFlg || !m_pMesh) return;			

	// グラフィックデバイス取得
	LPDIRECT3DDEVICE9 pDevice = MANAGER.GetGraph()->GetDevice();

	pDevice->SetTransform(D3DTS_WORLD, &m_Matrix);
	m_pMesh->DrawNoAlpha(m_Matrix);
}


//**関数***************************************************************************
//	概要	:	後描画
//			:	3Dにおいてはフラグの判定を行わないで透明と不透明両方描画する
//			:	半透明描画
//*********************************************************************************
void CObj3D::DrawLate()
{
	// 描画フラグがオフかメッシュが格納されていないなら描画しない
	if(!m_bUseFlg || !m_pMesh) return;		

	// グラフィックデバイス取得
	LPDIRECT3DDEVICE9 pDevice = MANAGER.GetGraph()->GetDevice();

	pDevice->SetTransform(D3DTS_WORLD, &m_Matrix);
	m_pMesh->DrawAlpha(m_Matrix);
}
//=================================================================================
//	End of File
//=================================================================================
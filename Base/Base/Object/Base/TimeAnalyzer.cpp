//**プログラムヘッダ***************************************************************
//	プログラム概要	:	
//*********************************************************************************


//==include部======================================================================
#include "TimeAnalizer.h"
#include "../../System/GameManager.h"
//=================================================================================


//==定数・列挙型部=================================================================

//=================================================================================


//==マクロ定義部===================================================================

//=================================================================================


//==クラス・構造体宣言部===========================================================

//=================================================================================


//==静的メンバ変数部===============================================================

//=================================================================================


//==プロトタイプ宣言===============================================================

//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CTimeAnalizer::CTimeAnalizer()
{
	_tcscpy_s(m_szMsg , _T("\0"));
	m_nSTime.HighPart = 0;
	m_nSTime.LowPart = 0;
	m_nETime.HighPart = 0;
	m_nETime.LowPart = 0;
}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CTimeAnalizer::~CTimeAnalizer()
{
}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CTimeAnalizer* CTimeAnalizer::Create(TCHAR* szStr , int nSceneID)
{
	CTimeAnalizer* pObj = new CTimeAnalizer();

	// セット
	if(pObj->Init(szStr , nSceneID))
		return pObj;

	SAFE_RELEASE(pObj);
	return NULL;
}


//**関数***************************************************************************
//	概要	:	
//*********************************************************************************
bool CTimeAnalizer::Init(TCHAR* szStr , int nSceneID)
{
	_tcscpy_s(m_szMsg , szStr);
	m_nSTime.HighPart = 0;
	m_nSTime.LowPart = 0;
	m_nETime.HighPart = 0;
	m_nETime.LowPart = 0;

	m_nSceneID = nSceneID;

	m_bUseFlg = true;

	// パフォーマンスカウンタの周波数取得
	LARGE_INTEGER freq;
	QueryPerformanceFrequency(&freq);
	if(freq.QuadPart == 0)
	{
		MessageBox(MANAGER.GetHWND() , _T("パフォーマンスカウンタは使用できません。\n") , _T("error") , MB_OK);
		m_bUseFlg = false;

		return false;
	}

	return true;
}


//**関数***************************************************************************
//	概要	:	描画
//*********************************************************************************
void CTimeAnalizer::Draw()
{
	if(!m_bUseFlg)
		return;

	TCHAR	Str[768];

	_stprintf_s(Str , _T("%s : %8d\n") , m_szMsg , (int)(m_nETime.QuadPart - m_nSTime.QuadPart));
	MANAGER.AddDebugStr(Str);
}


//**関数***************************************************************************
//	概要	:	後描画(処理なし)
//*********************************************************************************
void CTimeAnalizer::DrawLate()
{
}


//**関数***************************************************************************
//	概要	:	計測開始点指定
//*********************************************************************************
void CTimeAnalizer::StartPoint()
{
	if(!m_bUseFlg)
		return;

	QueryPerformanceCounter(&m_nSTime);
}


//**関数***************************************************************************
//	概要	:	計測終了点指定
//*********************************************************************************
void CTimeAnalizer::EndPoint()
{
	if(!m_bUseFlg)
		return;

	QueryPerformanceCounter(&m_nETime);
}


//**関数***************************************************************************
//	概要	:	計測可否
//*********************************************************************************
void CTimeAnalizer::Activate(bool bFlg)
{
	m_bUseFlg = bFlg;
}


//**関数***************************************************************************
//	概要	:	メッセージセット
//*********************************************************************************
void CTimeAnalizer::SetMsg(TCHAR* str)
{
	_tcscpy_s(m_szMsg , str);
}
//=================================================================================
//	End of File
//=================================================================================
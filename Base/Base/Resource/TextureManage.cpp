//**プログラムヘッダ***************************************************************
//	プログラム概要	:	テクスチャ管理クラス実装
//*********************************************************************************


//==include部======================================================================
#include "../System/GameManager.h"

#include "../System/common.h"
#include "TextureManage.h"
//=================================================================================


//==定数・列挙型部=================================================================

//=================================================================================


//==マクロ定義部===================================================================

//=================================================================================


//==クラス・構造体宣言部===========================================================

//=================================================================================


//==静的メンバ変数部===============================================================
TEX_VECT		CTextureManage::m_TextureVect(0);
TEXNAME_VECT	CTextureManage::m_TextureNameVect(0);
//=================================================================================


//==プロトタイプ宣言===============================================================

//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CTextureManage::CTextureManage()
{

}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CTextureManage::~CTextureManage()
{

}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CTextureManage* CTextureManage::Create()
{
	CTextureManage*	pManage = new CTextureManage;

	if(! pManage->Initialize())
	{
		::MessageBox(NULL , _T("TextureManage生成エラー") , _T("error") , MB_ICONERROR | MB_OK);
		return NULL;
	}

	return pManage;
}


//**関数***************************************************************************
//	概要	:	初期化
//*********************************************************************************
bool CTextureManage::Initialize()
{
	m_pDevice = CGraphics::GetDevice();

	return true;
}


//**関数***************************************************************************
//	概要	:	配列内検索
//			:	指定した名前のテクスチャへのポインタを返す
//*********************************************************************************
LPDIRECT3DTEXTURE9* CTextureManage::Search(LPCTSTR TexName)
{
	for(UINT i = 0 ; i < m_TextureNameVect.size() ; i ++)
	{
		if(_tcscmp(m_TextureNameVect[i] , TexName) != 0)
			continue;
			
		// 一致したらそのテクスチャへのポインタを返す
		return (LPDIRECT3DTEXTURE9*)(m_TextureVect[i]);
	}

	// 見つからなかったのでNULLを返す
	return NULL;
}

//**関数***************************************************************************
//	概要	:	配列へ登録
//			:	指定したテクスチャへのポインタを返す
//			:	ロード失敗したときはNULLを返す
//*********************************************************************************
LPDIRECT3DTEXTURE9* CTextureManage::Entry(LPCTSTR TexName)
{
	LPDIRECT3DTEXTURE9*	pTex = NULL;
	
	// すでに指定したファイルがあるかを検索
	pTex = Search(TexName);

	// あればそれを返す
	if(pTex)
		return pTex;


	// なかった場合は新規でロード
	pTex = new LPDIRECT3DTEXTURE9;

	// セマフォロック
	CGraphics::SemafoLock();
	if(FAILED(D3DXCreateTextureFromFile(m_pDevice , TexName , pTex)))
	{
		// 失敗したときはNULLを返す
		TCHAR dbg[256];
		_stprintf_s(dbg , _T("テクスチャ読み込みエラー%s\n") , TexName);
		::MessageBox(NULL , dbg , _T("error") , MB_ICONERROR | MB_OK);
		return NULL;
	}
	CGraphics::SemafoUnlock();

	// テクスチャとテクスチャ名を格納
	m_TextureVect.push_back(pTex);
	m_TextureNameVect.push_back(TexName);

	return pTex;
}


//**関数***************************************************************************
//	概要	:	配列を完全クリア
//*********************************************************************************
void CTextureManage::VectorClear()
{
	// リスト全解放
	for(UINT i = 0 ; i < m_TextureVect.size() ; i ++)
	{	
		(*m_TextureVect[i])->Release();
		m_TextureNameVect[i] = NULL;
	}

	m_TextureVect.clear();
	m_TextureNameVect.clear();
}


//**関数***************************************************************************
//	概要	:	マネージャ解放
//*********************************************************************************
void CTextureManage::Release()
{
	VectorClear();

	delete this;
}


//**関数***************************************************************************
//	概要	:	個別解放(ファイル名指定)
//			:	解放失敗時はfalseを返す
//*********************************************************************************
bool CTextureManage::ClearOnce(LPCTSTR TexName)
{
	TEXNAME_VECT_ITE iteName = m_TextureNameVect.begin();
	TEX_VECT_ITE iteTex = m_TextureVect.begin();

	for(UINT i = 0 ; i < m_TextureNameVect.size() ; i ++ , iteName ++ , iteTex ++)
	{
		if(_tcscmp(m_TextureNameVect[i] , TexName) != 0)
			continue;
		
		// 一致したら削除
		(*m_TextureVect[i])->Release();
		m_TextureNameVect[i] = NULL;
		m_TextureNameVect.erase(iteName);
		m_TextureVect.erase(iteTex);

		return true;
	}

	return false;
}


//=================================================================================
//	End of File
//=================================================================================
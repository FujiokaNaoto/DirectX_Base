//**プログラムヘッダ***************************************************************
//	プログラム概要	:	結果表示クラス実装
//*********************************************************************************


//==include部======================================================================
#include "GameClear.h"
#include "../System/GameManager.h"
#include "../Window/GameWnd.h"

#include "../System/Register.h"
#include "../Object/ObjButton/ObjButton.h"
//=================================================================================


//==定数・列挙型定義部=============================================================
namespace eGameClearConst
{
	TCHAR*	BG = _T("../img/ResultBG.png");
	TCHAR*	SCORE = _T("../img/Score.png");

	// 音
	//const	char*		BGM_NAME = "../sound/bgm/それでも僕たちの日常はまだまだ続く.mp3";
	//const	char*		KEY_SE_NAME = "../sound/se/button01.mp3";

};
//=================================================================================


//==マクロ定義部===================================================================
//	なし
//=================================================================================


//==クラス宣言部===================================================================
//	なし
//=================================================================================


//==グローバル変数部===============================================================
//	なし
//=================================================================================


//==静的メンバ変数部===============================================================
//=================================================================================


//==プロトタイプ宣言===============================================================
//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CGameClear::CGameClear(void):
m_pKey(NULL),
m_pBgm(NULL)
{
}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CGameClear::~CGameClear(void)
{
}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CGameClear* CGameClear::Create(int nSceneID)
{
	CGameClear* pResult = new CGameClear();
	if (!pResult) 
	{
		return NULL;
	}

	pResult->m_nSceneID = nSceneID;

	return pResult;
}


//**関数***************************************************************************
//	概要	:	解放
//*********************************************************************************
void CGameClear::Release()
{
	Uninit();
	delete this;
}


//関数ヘッダ***********************************************************************	
//	概要	:	初期化、ゲームループ内
//*********************************************************************************
bool CGameClear::Init(void)
{
	// オブジェクト生成用バッファ
	CObjBase*	pBuf = NULL;
	D3DXVECTOR3 vecBuf = D3DXVECTOR3(0,0,0);
	
	// SE
	//m_pKey = OpenSoundEffect(MANAGER.GetAudioDevice()->get() , eGameClearConst::KEY_SE_NAME , MULTIPLE);

	//m_pBgm = OpenSound(MANAGER.GetAudioDevice()->get() , eGameClearConst::BGM_NAME , true);
	//m_pBgm->setRepeat(true);
	//m_pBgm->play();

	return true;
}


//関数ヘッダ***********************************************************************	
//	概要	:	終了処理、ゲームループ内
//*********************************************************************************
void CGameClear::Uninit(void)
{
	//m_pBgm->stop();

	// --結果所属のオブジェのみ解放--
	REGISTER->ReleaseScene(eScene_ID::CLEAR);
}


//**関数***************************************************************************
//	概要	:	入力受付
//*********************************************************************************
void CGameClear::Input()
{
	CDXInput* pInput = MANAGER.GetInput();

	if(pInput->GetKeyTrigger(DIK_RETURN))
	{
		//m_pKey->play();
		MANAGER.GetSceneManage()->SetNextScene(eScene_ID::TITLE , eChanging::CHANGE_WHITEFEAD);
	}
}


//**関数***************************************************************************
//	概要	:	更新
//*********************************************************************************
void CGameClear::Update()
{

}


//**関数***************************************************************************
//	概要	:	描画
//*********************************************************************************
void CGameClear::Draw()
{
	TCHAR	str[256];						// デバック用バッファ

#ifdef _DEBUG
	// デバック文字
	_stprintf_s(str , _T("クリアシーン\n"));
	MANAGER.AddDebugStr(str);
#endif
}


//**関数***************************************************************************
//	概要	:	プライオリティの最大数取得
//*********************************************************************************
int CGameClear::GetMaxPriority()
{
	return eGameClearPri::MAX;
}
//=================================================================================
//	End of File
//=================================================================================
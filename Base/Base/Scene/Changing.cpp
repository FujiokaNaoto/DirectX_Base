//**プログラムヘッダ***************************************************************
//	プログラム概要	:	シーン変更中クラス実装
//*********************************************************************************


//==include部======================================================================
#include <math.h>
#include <stdlib.h>
#include "../System/GameManager.h"
#include "../Window/GameWnd.h"

#include "Changing.h"
#include "../System/Register.h"

// --変更処理を行うオブジェクト--
#include "../Object/Change/ChangeFead.h"
//=================================================================================


//==定数・列挙型部=================================================================
namespace eChangeTex
{

}


// --オブジェクト初期値--
namespace eChangeConst
{

};

//=================================================================================


//==マクロ定義部===================================================================
//	なし
//=================================================================================


//==クラス宣言部===================================================================
//	なし
//=================================================================================


//==グローバル変数部===============================================================
//	なし
//=================================================================================


//==静的メンバ変数部===============================================================

//=================================================================================


//==プロトタイプ宣言===============================================================
//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CChanging::CChanging(void):
m_pBefore(NULL),
m_pAfter(NULL),
m_bChange(false),
m_bBefore(false)
{

}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CChanging::~CChanging(void)
{
}


//**関数***************************************************************************
//	概要	:	生成
//			:	生成、初期化成功でシーンへのポインタを返す。
//			:	失敗したらNULLを返す
//*********************************************************************************
CChanging* CChanging::Create(int nSceneID)
{
	CChanging* pChange = new CChanging();
	if (! pChange) 
	{
		return NULL;
	}

	pChange->m_nSceneID = nSceneID;					// シーンIDセット

	return pChange;
}


//**関数***************************************************************************
//	概要	:	解放
//*********************************************************************************
void CChanging::Release()
{
	Uninit();
	delete this;
}


//関数ヘッダ***********************************************************************	
//	概要	:	初期化、ゲームループ内
//*********************************************************************************
bool CChanging::Init(void)
{
	CObjBase* pChangeObj = NULL;
	// 変更中アニメーション類生成
	switch(m_nChangeType)
	{
	case eChanging::CHANGE_WHITEFEAD:
		pChangeObj = CChangeFead::Create(this , eChanging::CHANGE_WHITEFEAD , m_nSceneID , m_pBefore->GetMaxPriority());
		REGISTER->Entry(pChangeObj , eOBJSTAGE::FADE);
		m_hChangeObj = pChangeObj->GetHandle();
		break;

	case eChanging::CHANGE_BLACKFEAD:
		pChangeObj = CChangeFead::Create(this , eChanging::CHANGE_BLACKFEAD , m_nSceneID , m_pBefore->GetMaxPriority());
		REGISTER->Entry(pChangeObj , eOBJSTAGE::FADE);
		m_hChangeObj = pChangeObj->GetHandle();
		break;

	// 指定がないときは即時変更
	default:
		SceneChange();
		ChangeEnd();
		break;
	}
	return true;
}


//関数ヘッダ***********************************************************************	
//	概要	:	終了処理、ゲームループ内
//*********************************************************************************
void CChanging::Uninit(void)
{
	// --メイン所属オブジェクト解放--
	REGISTER->ReleaseScene(eScene_ID::CHANGE);
}


//**関数***************************************************************************
//	概要	:	入力受付
//*********************************************************************************
void CChanging::Input()
{
	CDXInput* pInput = MANAGER.GetInput();

	REGISTER_H_P(m_hChangeObj , CObjBase*)->OnInput();
}


//**関数***************************************************************************
//	概要	:	更新
//*********************************************************************************
void CChanging::Update()
{
	if(m_bBefore)
		m_pBefore->Update();
	else
		m_pAfter->Update();
}


//**関数***************************************************************************
//	概要	:	シーン変更
//*********************************************************************************
void CChanging::SceneChange()
{
	m_bBefore = false;

	m_pBefore->Uninit();
	m_pAfter->Init();
	

	REGISTER_H_P(m_hChangeObj , CObjBase*)->SetPriority(m_pAfter->GetMaxPriority());
}


//**関数***************************************************************************
//	概要	:	チェンジ終了
//*********************************************************************************
void CChanging::ChangeEnd()
{
	m_bChange = false;
}


//**関数***************************************************************************
//	概要	:	描画
//*********************************************************************************
void CChanging::Draw()
{
	TCHAR	str[256];						// バッファ

	if(m_bBefore)
		m_pBefore->Draw();
	else
		m_pAfter->Draw();

#ifdef _DEBUG
	// デバック文字
	_stprintf_s(str , _T("チェンジ中クラス\n"));
	MANAGER.AddDebugStr(str);
#endif
}


//**関数***************************************************************************
//	概要	:	プライオリティの最大数取得
//*********************************************************************************
int CChanging::GetMaxPriority()
{
	if(m_bBefore)
		return m_pBefore->GetMaxPriority();
	else
		return m_pAfter->GetMaxPriority();
}


//**関数***************************************************************************
//	概要	:	シーン変更開始
//*********************************************************************************
bool CChanging::SetNextScene(CScene* pNext , CScene* pCurrent , int nChangeType)
{
	// 変更中なら受け付けない
	if(m_bChange)
		return false;

	// 更新対象のシーンを設定
	m_pBefore = pCurrent;								// 変更前
	m_pAfter = pNext;									// 変更後
	m_bChange = true;
	m_bBefore = true;

	m_nChangeType = nChangeType;

	return false;
}
//=================================================================================
//	End of File
//=================================================================================
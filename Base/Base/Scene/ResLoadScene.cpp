//**プログラムヘッダ***************************************************************
//	プログラム概要	:	リソースロードシーン(Now Loading)
//*********************************************************************************


//==include部======================================================================
#include "ResLoadScene.h"
#include "../System/GameManager.h"
#include "../Window/GameWnd.h"

#include "../System/Register.h"
#include "../Object/Obj2D/FeadObj.h"
#include <process.h>
//=================================================================================


//==定数・列挙型部=================================================================
namespace eResLoad
{
	// ロード中画面オブジェ
	TCHAR* BG = _T("resource_data/img/Feadout.png");
	
	TCHAR* LOAD_RES_ARRAY[] = 
	{
		_T("resource_data/img/Bg.png"),	
	};
	
	const int	LOADEND_FRAME = 1;			// ロード後の待ちフレーム数
	
	// ロード中フォント
	const int	BEFORE_LOADWAIT = 300;
	const int	LOADWAIT = 50;
	const int	WAIT_LENGE = 4;
};
//=================================================================================


//==マクロ定義部===================================================================

//=================================================================================


//==クラス・構造体宣言部===========================================================

//=================================================================================


//==静的メンバ変数部===============================================================

//=================================================================================


//==プロトタイプ宣言===============================================================

//=================================================================================


//**関数***************************************************************************
//	概要	:	コンストラクタ
//*********************************************************************************
CResLoadScene::CResLoadScene():
m_nWaitCnt(0),
m_hFead(0),
m_hThread(0),
m_bChangeFlg(false)
{
}


//**関数***************************************************************************
//	概要	:	デストラクタ
//*********************************************************************************
CResLoadScene::~CResLoadScene()
{
}


//**関数***************************************************************************
//	概要	:	生成
//*********************************************************************************
CResLoadScene* CResLoadScene::Create(int nSceneID)
{
	CResLoadScene* pRes = new CResLoadScene();	
	if(!pRes)
	{
		return NULL;
	}
	
	pRes->m_nSceneID = nSceneID;								// シーンIDセット

	return pRes;
}


//**関数***************************************************************************
//	概要	:	初期化
//*********************************************************************************
bool CResLoadScene::Init()
{
	// 変数初期化
	m_nWaitCnt = 0;
	m_hFead = 0;
	m_hThread = 0;
	m_bChangeFlg = false;
	m_hThread = 0;


	

	// リソース一括ロード関数動作開始
	m_hThread = (HANDLE)_beginthreadex(NULL , 0 , ResLoading , NULL , 0 , NULL);

	return true;
}


//**関数***************************************************************************
//	概要	:	終了処理
//*********************************************************************************
void CResLoadScene::Uninit()
{
	REGISTER->ReleaseScene(eScene_ID::RESLOAD);
}


//**関数***************************************************************************
//	概要	:	更新
//*********************************************************************************
void CResLoadScene::Update()
{
	if(m_bChangeFlg)
		return;

	// ロード終了確認
	if(WaitForSingleObject(m_hThread , 0) == WAIT_OBJECT_0)
	{
		CloseHandle(m_hThread);										// ハンドルを閉じる
		m_hThread = 0;
	}

	// ロード終了していたらカウンタ加算
	if(m_hThread)
		return;

	m_nWaitCnt ++;

	// カウンタ上限でタイトルへ
	if(m_nWaitCnt >= eResLoad::LOADEND_FRAME && !m_bChangeFlg)
	{
		m_bChangeFlg = true;
		MANAGER.GetSceneManage()->SetNextScene(eScene_ID::TITLE , eChanging::CHANGE_WHITEFEAD);
	}
}


//**関数***************************************************************************
//	概要	:	リソースロード関数
//*********************************************************************************
unsigned int WINAPI CResLoadScene::ResLoading(void* arg)
{
	int nLength = _countof(eResLoad::LOAD_RES_ARRAY);
	CTextureManage*	pTexManage = MANAGER.GetTexManage();

	Sleep(eResLoad::BEFORE_LOADWAIT);

	int i = 0;
	int nStay = 0;

	// ロード対象テクスチャを一括ロード
	for( i = 0 ; i < nLength ; i ++ , nStay ++)
	{
		//if(i & 0x03 == 3)
		if(nStay == eResLoad::WAIT_LENGE)
		{
			nStay = 0;
			Sleep(eResLoad::LOADWAIT);
		}

		pTexManage->Entry(eResLoad::LOAD_RES_ARRAY[i]);
	}


	// スレッド終了
	_endthreadex(0);
	return 0;
}


//**関数***************************************************************************
//	概要	:	最大プライオリティ
//*********************************************************************************
int CResLoadScene::GetMaxPriority()
{
	return eResLoadScenePri::MAX;
}

//=================================================================================
//	End of File
//=================================================================================